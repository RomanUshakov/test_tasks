Задача 1:
1. Есть доска n * n клеток.
2. На доске m шариков и m дырок.
3. И шарики, и дырки пронумерованы цифрами от 1 до m.
4. На доске есть k стен. Стены могут быть или вертикальными, или горизонтальными и могут стоять только на границе клеток.
5. Доску можно наклонять влево, вправо, вверх или вниз. Наклоны обозначаются буквами W,E,N,S соответственно. При наклоне шарики катятся в указанном направлении пока не встретят границу доски, дырку или стенку. Два шарика не могут находиться на одной клетке, поэтому, если один шарик уже достиг препятствия, второй шарик становися за ним.
6. Если шарик попадает в дырку, то:
	a. Если номера дырки и шарика совпадают, то они исчезают с доски.
	b. Если номера не совпадают - игра считается проигранной.
7. Цель игры – закатить все шарики в соответствующие дырки за минимальное количество наклонов доски.

Требуется написать програму:
1. На вход подаётся файл со следующими разделёнными пробелами числами:
	a. n m k – параметры игры.
	b. m пар координат шариков column[i] row[i] – номер колонки и номер строки, в которой находится шарик. Левая верхняя ячейка имеет координаты 1 1.
	c. m пар координат дырок column[i] row[i] – номер колонки и номер строки, в которой находится дырка. Левая верхняя ячейка имеет координаты 1 1.
	d. k координат стенок. Стенки задаются как координаты ячеек, между которыми она находится. В результате получается 4 числа: column1[i] row1[i] column2[i] row2[i].
2. Требуется на выходе из программы вывести на экран кратчайшую последовательность наклонов (используя W E N S) если решение возможно, или X, если решение невозможно. Если решений несколько, то можно выдать любое из них.

Критерии работы программы:
1. При оценке программы первоочередным критерием является трудоемкость и эффективность используемого алгоритма.
2. Проверять входные данные програмы на валидность не надо – считается, что они заданы коректно.
3. Можно пользоваться STL и Boost.

Пример:
1.
Входные данные:
4 3 2 1 1 1 2 4 1 2 4 2 2 4 2 2 1 3 1 3 3 3 4
-------------------------
| (1) |     ||    | (3) |
-------------------------
| (2) | >2< |     | >3< |
-------------------------
|     |     |     |     |
------------=======------
|     | >1< |     |     |
-------------------------
Решение:
ES

2.
Входные данные:
2 2 1 1 1 2 2 1 2 2 1 1 1 1 2
-------------
| (1) | >2< |
=======------
| >1< | (2) |
-------------
Решение:
NESW
